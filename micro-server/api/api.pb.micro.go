// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package holingo_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Holingo service

type HolingoService interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error)
	SayHello(ctx context.Context, in *HelloReq, opts ...client.CallOption) (*HelloResp, error)
	AddArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Article, error)
	SearchArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Article, error)
}

type holingoService struct {
	c    client.Client
	name string
}

func NewHolingoService(name string, c client.Client) HolingoService {
	return &holingoService{
		c:    c,
		name: name,
	}
}

func (c *holingoService) Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Holingo.Ping", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holingoService) SayHello(ctx context.Context, in *HelloReq, opts ...client.CallOption) (*HelloResp, error) {
	req := c.c.NewRequest(c.name, "Holingo.SayHello", in)
	out := new(HelloResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holingoService) AddArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Article, error) {
	req := c.c.NewRequest(c.name, "Holingo.AddArticle", in)
	out := new(Article)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holingoService) SearchArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Article, error) {
	req := c.c.NewRequest(c.name, "Holingo.SearchArticle", in)
	out := new(Article)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Holingo service

type HolingoHandler interface {
	Ping(context.Context, *empty.Empty, *empty.Empty) error
	SayHello(context.Context, *HelloReq, *HelloResp) error
	AddArticle(context.Context, *Article, *Article) error
	SearchArticle(context.Context, *Article, *Article) error
}

func RegisterHolingoHandler(s server.Server, hdlr HolingoHandler, opts ...server.HandlerOption) error {
	type holingo interface {
		Ping(ctx context.Context, in *empty.Empty, out *empty.Empty) error
		SayHello(ctx context.Context, in *HelloReq, out *HelloResp) error
		AddArticle(ctx context.Context, in *Article, out *Article) error
		SearchArticle(ctx context.Context, in *Article, out *Article) error
	}
	type Holingo struct {
		holingo
	}
	h := &holingoHandler{hdlr}
	return s.Handle(s.NewHandler(&Holingo{h}, opts...))
}

type holingoHandler struct {
	HolingoHandler
}

func (h *holingoHandler) Ping(ctx context.Context, in *empty.Empty, out *empty.Empty) error {
	return h.HolingoHandler.Ping(ctx, in, out)
}

func (h *holingoHandler) SayHello(ctx context.Context, in *HelloReq, out *HelloResp) error {
	return h.HolingoHandler.SayHello(ctx, in, out)
}

func (h *holingoHandler) AddArticle(ctx context.Context, in *Article, out *Article) error {
	return h.HolingoHandler.AddArticle(ctx, in, out)
}

func (h *holingoHandler) SearchArticle(ctx context.Context, in *Article, out *Article) error {
	return h.HolingoHandler.SearchArticle(ctx, in, out)
}
